module Memory (
    input wire aclk,
    input wire aresetn,
    // AXI Write Address Channel
    input wire [31:0] awaddr,
    input wire awvalid,
    output reg awready,
    input wire [7:0] awlen, // Burst length
    input wire [2:0] awsize, // Transfer size
    input wire [1:0] awburst, // Burst type
    // AXI Write Data Channel
    input wire [31:0] wdata,
    input wire wvalid,
    output reg wready,
    input wire wlast,
    // AXI Write Response Channel
    output reg bvalid,
    input wire bready,
    output reg [1:0] bresp, // Write response
    // AXI Read Address Channel
    input wire [31:0] araddr,
    input wire arvalid,
    output reg arready,
    input wire [7:0] arlen, // Burst length
    input wire [2:0] arsize, // Transfer size
    input wire [1:0] arburst, // Burst type
    // AXI Read Data Channel
    output reg [31:0] rdata,
    output reg rvalid,
    input wire rready,
    output reg rlast
);

    // Internal memory storage (simple byte-addressable memory)
    reg [31:0] memory [0:1023]; // 4KB memory

    // Internal state for write and read operations
    reg [31:0] awaddr_reg;
    reg [7:0] awlen_reg;
    reg [31:0] araddr_reg;
    reg [7:0] arlen_reg;

    // Write Address Channel
    always @(posedge aclk or negedge aresetn) begin
        if (!aresetn) begin
            awready <= 0;
            awaddr_reg <= 0;
            awlen_reg <= 0;
        end else begin
            if (awvalid && !awready) begin
                awready <= 1;
                awaddr_reg <= awaddr;
                awlen_reg <= awlen;
            end else if (awready && wvalid && wready) begin
                if (awlen_reg == 0) begin
                    awready <= 0;
                end
            end
        end
    end

    // Write Data Channel
    always @(posedge aclk or negedge aresetn) begin
        if (!aresetn) begin
            wready <= 0;
        end else begin
            if (awready && wvalid) begin
                wready <= 1;
                memory[awaddr_reg[11:2]] <= wdata; // 4-byte aligned address
                if (awlen_reg > 0) begin
                    awaddr_reg <= awaddr_reg + 4;
                    awlen_reg <= awlen_reg - 1;
                end else if (wlast) begin
                    wready <= 0;
                end
            end
        end
    end

    // Write Response Channel
    always @(posedge aclk or negedge aresetn) begin
        if (!aresetn) begin
            bvalid <= 0;
            bresp <= 2'b00;
        end else begin
            if (wready && wvalid && wlast) begin
                bvalid <= 1;
                bresp <= 2'b00; // OKAY
            end else if (bvalid && bready) begin
                bvalid <= 0;
            end
        end
    end

    // Read Address Channel
    always @(posedge aclk or negedge aresetn) begin
        if (!aresetn) begin
            arready <= 0;
            araddr_reg <= 0;
            arlen_reg <= 0;
        end else begin
            if (arvalid && !arready) begin
                arready <= 1;
                araddr_reg <= araddr;
                arlen_reg <= arlen;
            end else if (arready && rvalid && rready) begin
                if (arlen_reg == 0) begin
                    arready <= 0;
                end
            end
        end
    end

    // Read Data Channel
    always @(posedge aclk or negedge aresetn) begin
        if (!aresetn) begin
            rvalid <= 0;
            rlast <= 0;
        end else begin
            if (arready && arvalid) begin
                rvalid <= 1;
                rdata <= memory[araddr_reg[11:2]]; // 4-byte aligned address
                if (arlen_reg > 0) begin
                    araddr_reg <= araddr_reg + 4;
                    arlen_reg <= arlen_reg - 1;
                end else if (arlen_reg == 0) begin
                    rlast <= 1;
                end
            end else if (rvalid && rready) begin
                rvalid <= 0;
                rlast <= 0;
            end
        end
    end

endmodule
